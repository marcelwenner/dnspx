# ===== SECURITY AUDIT EXCEPTIONS =====
# Diese RUSTSEC Advisories werden bewusst ignoriert (siehe SECURITY.md):
# - RUSTSEC-2023-0071: RSA Marvin Attack - Windows SSPI nur, dokumentierte Mitigationen
# - RUSTSEC-2024-0436: paste crate - no longer maintained, aber keine Alternative verfügbar
# 
# Release Security Policy:
# - Finale Sicherheitsprüfung vor jedem Release
# - Windows-Builds enthalten SSPI-Warnung in Release Notes
# - paste crate: Funktional stabil, minimale Attack Surface (proc-macros)
# - Alle Plattformen werden auditiert, bekannte Risiken dokumentiert
# 
# Referenz: SECURITY.md
# ==========================================

name: Release

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as prerelease'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  attestations: write
  id-token: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # ===== RELEASE VALIDATION =====
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
          IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
          if [[ "$VERSION" =~ -rc|-beta|-alpha ]]; then
            IS_PRERELEASE="true"
          else
            IS_PRERELEASE="false"
          fi
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION (prerelease: $IS_PRERELEASE)"

    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          echo "Expected format: vX.Y.Z or vX.Y.Z-suffix"
          exit 1
        fi

    - name: Check if tag exists
      if: github.event_name == 'workflow_dispatch'
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if git rev-parse "$VERSION" >/dev/null 2>&1; then
          echo "❌ Tag $VERSION already exists"
          exit 1
        fi

    - name: Validate Cargo.toml version
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        CARGO_VERSION="v$(cargo pkgid | cut -d# -f2 | cut -d: -f2)"
        if [[ "$VERSION" != "$CARGO_VERSION" ]]; then
          echo "❌ Version mismatch:"
          echo "  Tag version: $VERSION"
          echo "  Cargo.toml version: $CARGO_VERSION"
          exit 1
        fi

  # ===== PRE-RELEASE SECURITY CHECK =====
  security-check:
    name: Final Security Check
    runs-on: ubuntu-latest
    needs: validate
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install security tools
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-audit,cargo-deny

    - name: Security audit
      run: |
        echo "🔒 Final Security Audit for Release"
        echo "   Documented exceptions (see SECURITY.md):"
        echo "   - RUSTSEC-2023-0071: Windows SSPI timing attack (Medium severity)"
        echo "   - RUSTSEC-2024-0436: paste crate unmaintained (Informational)"
        echo "   - Release notes will include Windows security considerations"
        cargo audit --deny warnings --ignore RUSTSEC-2023-0071 --ignore RUSTSEC-2024-0436
        cargo deny check advisories

  # ===== MULTI-PLATFORM RELEASE BUILDS =====
  build:
    name: Build (${{ matrix.name }})
    needs: [validate, security-check]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - name: linux-x64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
            
          - name: linux-arm64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            archive: tar.gz
            cross: true
            
          - name: linux-musl-x64
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            archive: tar.gz
            cross: true
            
          # Windows targets
          - name: windows-x64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            archive: zip
            
          - name: windows-arm64
            os: windows-latest
            target: aarch64-pc-windows-msvc
            archive: zip
            
          # macOS targets
          - name: macos-intel
            os: macos-13
            target: x86_64-apple-darwin
            archive: tar.gz
            
          - name: macos-arm64
            os: macos-latest
            target: aarch64-apple-darwin
            archive: tar.gz

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross
      if: matrix.cross
      uses: taiki-e/install-action@v2
      with:
        tool: cross

    # Optimized release caching
    - name: Setup cache
      uses: Swatinem/rust-cache@v2
      with:
        key: release-${{ matrix.target }}
        cache-targets: false

    # Aggressive release build
    - name: Build release
      run: |
        export CARGO_PROFILE_RELEASE_CODEGEN_UNITS=1
        export CARGO_PROFILE_RELEASE_LTO=fat
        export CARGO_PROFILE_RELEASE_PANIC=abort
        export CARGO_PROFILE_RELEASE_STRIP=symbols
        
        if [[ "${{ matrix.cross }}" == "true" ]]; then
          cross build --release --target ${{ matrix.target }} --all-features
        else
          cargo build --release --target ${{ matrix.target }} --all-features
        fi

    # Create optimized archives
    - name: Create release archive
      shell: bash
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        mkdir -p dist
        cd target/${{ matrix.target }}/release/
        
        # Determine binary extension
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          BINARY="dnspx.exe"
        else
          BINARY="dnspx"
        fi
        
        # Create archive with metadata
        ARCHIVE_NAME="dnspx-$VERSION-${{ matrix.name }}"
        
        if [[ "${{ matrix.archive }}" == "zip" ]]; then
          7z a "../../../dist/$ARCHIVE_NAME.zip" "$BINARY"
        else
          tar czf "../../../dist/$ARCHIVE_NAME.tar.gz" "$BINARY"
        fi
        
        # Generate checksums and metadata
        cd ../../../dist
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          powershell -Command "Get-FileHash $ARCHIVE_NAME.${{ matrix.archive }} -Algorithm SHA256 | Select-Object -ExpandProperty Hash" > "$ARCHIVE_NAME.sha256"
          powershell -Command "Get-FileHash $ARCHIVE_NAME.${{ matrix.archive }} -Algorithm SHA512 | Select-Object -ExpandProperty Hash" > "$ARCHIVE_NAME.sha512"
        else
          sha256sum "$ARCHIVE_NAME.${{ matrix.archive }}" > "$ARCHIVE_NAME.sha256"
          sha512sum "$ARCHIVE_NAME.${{ matrix.archive }}" > "$ARCHIVE_NAME.sha512"
        fi
        
        # Create metadata file
        cat > "$ARCHIVE_NAME.json" << EOF
        {
          "name": "dnspx",
          "version": "$VERSION",
          "target": "${{ matrix.target }}",
          "platform": "${{ matrix.name }}",
          "archive_type": "${{ matrix.archive }}",
          "build_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "rust_version": "$(rustc --version)",
          "features": ["all"]
        }
        EOF

    # Sign releases (if signing key available)
    - name: Sign release artifacts
      if: env.SIGNING_KEY != ''
      env:
        SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
      shell: bash
      run: |
        if command -v gpg >/dev/null 2>&1; then
          echo "$SIGNING_KEY" | gpg --import
          cd dist
          for file in dnspx-*; do
            gpg --detach-sign --armor "$file"
          done
        fi

    # Generate attestations for supply chain security
    - name: Generate attestation
      uses: actions/attest-build-provenance@v1
      with:
        subject-path: 'dist/dnspx-*'

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.name }}
        path: dist/
        retention-days: 90

  # ===== CONTAINER IMAGES =====
  docker:
    name: Build Container Images
    needs: [validate, security-check]
    runs-on: ubuntu-latest
    if: needs.validate.outputs.is-prerelease == 'false'
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ===== CREATE GITHUB RELEASE =====
  release:
    name: Create GitHub Release
    needs: [validate, build, docker]
    if: always() && needs.validate.result == 'success' && needs.build.result == 'success'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: release-*
        path: artifacts/
        merge-multiple: true

    - name: Generate release notes
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        echo "# Release $VERSION" > release-notes.md
        echo "" >> release-notes.md
        
        # Get previous tag for changelog
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [[ -n "$PREV_TAG" ]]; then
          echo "## Changes since $PREV_TAG" >> release-notes.md
          echo "" >> release-notes.md
          git log --oneline "$PREV_TAG..HEAD" | sed 's/^/- /' >> release-notes.md
        else
          echo "## Initial Release" >> release-notes.md
        fi
        
        echo "" >> release-notes.md
        echo "## Downloads" >> release-notes.md
        echo "" >> release-notes.md
        echo "| Platform | Architecture | Download |" >> release-notes.md
        echo "|----------|--------------|----------|" >> release-notes.md
        
        # Generate download table
        cd artifacts
        for file in dnspx-*.tar.gz dnspx-*.zip; do
          if [[ -f "$file" ]]; then
            case "$file" in
              *linux-x64*) echo "| Linux | x86_64 | [$file](./$file) |" ;;
              *linux-arm64*) echo "| Linux | ARM64 | [$file](./$file) |" ;;
              *linux-musl*) echo "| Linux (musl) | x86_64 | [$file](./$file) |" ;;
              *windows-x64*) echo "| Windows | x86_64 | [$file](./$file) |" ;;
              *windows-arm64*) echo "| Windows | ARM64 | [$file](./$file) |" ;;
              *macos-intel*) echo "| macOS | Intel | [$file](./$file) |" ;;
              *macos-arm64*) echo "| macOS | Apple Silicon | [$file](./$file) |" ;;
            esac
          fi
        done >> ../release-notes.md

    - name: Create release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.validate.outputs.version }}
        name: Release ${{ needs.validate.outputs.version }}
        body_path: release-notes.md
        files: artifacts/*
        draft: false
        prerelease: ${{ needs.validate.outputs.is-prerelease }}
        generate_release_notes: true
        make_latest: ${{ needs.validate.outputs.is-prerelease == 'false' }}

  # ===== POST-RELEASE TASKS =====
  post-release:
    name: Post-Release Tasks
    needs: [validate, release]
    runs-on: ubuntu-latest
    if: success()
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Update version for next development cycle
      if: needs.validate.outputs.is-prerelease == 'false'
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        # Extract version parts
        MAJOR=$(echo $VERSION | sed 's/v\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*/\1/')
        MINOR=$(echo $VERSION | sed 's/v\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*/\2/')
        PATCH=$(echo $VERSION | sed 's/v\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*/\3/')
        
        # Increment patch version
        NEXT_PATCH=$((PATCH + 1))
        NEXT_VERSION="$MAJOR.$MINOR.$NEXT_PATCH"
        
        echo "Updating version to $NEXT_VERSION-dev"
        sed -i "s/version = \".*\"/version = \"$NEXT_VERSION-dev\"/" Cargo.toml

    - name: Create post-release PR
      if: needs.validate.outputs.is-prerelease == 'false'
      uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: bump version for next development cycle"
        title: "chore: bump version for next development cycle"
        body: |
          Automatically created after release ${{ needs.validate.outputs.version }}
          
          This updates the version in Cargo.toml for the next development cycle.
        branch: chore/post-release-version-bump
        base: develop

    - name: Release summary
      run: |
        echo "# 🚀 Release ${{ needs.validate.outputs.version }} Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Release Type:** ${{ needs.validate.outputs.is-prerelease == 'true' && 'Pre-release' || 'Stable Release' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Platforms:** Linux (x64, ARM64, musl), Windows (x64, ARM64), macOS (Intel, Apple Silicon)" >> $GITHUB_STEP_SUMMARY
        echo "**Container Images:** Available on GitHub Container Registry" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "[📥 View Release](https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.version }})" >> $GITHUB_STEP_SUMMARY