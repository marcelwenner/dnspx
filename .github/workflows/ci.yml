# .github/workflows/ci.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_run:
    workflows: ["Fast CI (Feature Branches)"]
    types: [completed]

permissions:
  contents: read
  security-events: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0      # Disable incremental compilation for CI
  CARGO_NET_RETRY: 10       # Retry network requests
  RUST_LOG: warn            # Reduce log noise
  CARGO_BUILD_JOBS: 1       # Limit to 1 job to reduce memory pressure
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse  # Use sparse protocol

jobs:
  # ===== CROSS-PLATFORM BUILD & TEST =====
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache Rust toolchain
      uses: actions/cache@v4
      with:
        path: |
          ~/.rustup
          ~/.cargo/bin
        key: ${{ runner.os }}-rust-${{ matrix.rust }}
        
    - name: Cache cargo registry and builds
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-
        
    - name: Cache installed tools
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin/cargo-*
        key: ${{ runner.os }}-cargo-tools

    - name: Check code formatting
      if: matrix.rust == 'stable'
      run: cargo fmt --all -- --check

    - name: Run Clippy lints
      if: matrix.rust == 'stable'
      run: cargo clippy --bins --all-features -- -D warnings

    - name: Build and test (all features)
      run: |
        cargo build --verbose --all-features
        cargo test --verbose --all-features
        cargo build --release --verbose --all-features
      env:
        RUST_LOG: warn  # Reduce log noise

  # ===== SECURITY & QUALITY CHECKS =====
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo tools
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin/cargo-audit
        key: cargo-audit-${{ runner.os }}

    - name: Install cargo-audit
      run: |
        if ! command -v cargo-audit &> /dev/null; then
          cargo install --locked cargo-audit
        fi

    - name: Run security audit
      run: |
        # Ignore known/documented vulnerabilities that are acceptable
        cargo audit --ignore RUSTSEC-2023-0071 --ignore RUSTSEC-2024-0436


  # ===== DEPENDENCY CHECK (only on main) =====
  dependencies:
    name: Dependency Check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo tools
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin/cargo-machete
        key: cargo-machete-${{ runner.os }}

    - name: Install cargo-machete
      run: |
        if ! command -v cargo-machete &> /dev/null; then
          cargo install --locked cargo-machete
        fi

    - name: Check for unused dependencies
      run: cargo machete


  # ===== RELEASE BUILD =====
  release:
    name: Release Build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    needs: [test, security]
    strategy:
      matrix:
        include:
          # Linux builds
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            cross: false
          - target: aarch64-unknown-linux-gnu  
            os: ubuntu-latest
            cross: true
          # Windows builds (native)
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            cross: false
          - target: aarch64-pc-windows-msvc
            os: windows-latest  
            cross: false
          # macOS builds (native)
          - target: x86_64-apple-darwin
            os: macos-latest
            cross: false
          - target: aarch64-apple-darwin
            os: macos-latest
            cross: false
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: cargo-registry-
          
    - name: Cache target directory
      uses: actions/cache@v4
      with:
        path: target/
        key: ${{ matrix.os }}-target-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ matrix.os }}-target-${{ matrix.target }}-
          ${{ matrix.os }}-target-

    - name: Install cross-compilation tools
      if: matrix.cross
      run: cargo install cross

    - name: Build release binary
      run: |
        if [[ "${{ matrix.cross }}" == "true" ]]; then
          cross build --release --target ${{ matrix.target }}
        else
          cargo build --release --target ${{ matrix.target }}
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dnspx-${{ matrix.target }}
        path: |
          target/${{ matrix.target }}/release/dnspx*
          !target/${{ matrix.target }}/release/*.d

    - name: Download all build artifacts
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Create release archives
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        mkdir -p releases
        
        # Linux x64
        if [ -d "artifacts/dnspx-x86_64-unknown-linux-gnu" ]; then
          cd artifacts/dnspx-x86_64-unknown-linux-gnu
          tar czf ../../releases/dnspx-linux-x64.tar.gz dnspx
          cd ../..
        fi
        
        # Linux ARM64
        if [ -d "artifacts/dnspx-aarch64-unknown-linux-gnu" ]; then
          cd artifacts/dnspx-aarch64-unknown-linux-gnu
          tar czf ../../releases/dnspx-linux-arm64.tar.gz dnspx
          cd ../..
        fi
        
        # Windows x64 (MSVC)
        if [ -d "artifacts/dnspx-x86_64-pc-windows-msvc" ]; then
          cd artifacts/dnspx-x86_64-pc-windows-msvc
          zip ../../releases/dnspx-windows-x64.zip dnspx.exe
          cd ../..
        fi
        
        # Windows ARM64 (MSVC)
        if [ -d "artifacts/dnspx-aarch64-pc-windows-msvc" ]; then
          cd artifacts/dnspx-aarch64-pc-windows-msvc
          zip ../../releases/dnspx-windows-arm64.zip dnspx.exe
          cd ../..
        fi
        
        # macOS Intel
        if [ -d "artifacts/dnspx-x86_64-apple-darwin" ]; then
          cd artifacts/dnspx-x86_64-apple-darwin
          tar czf ../../releases/dnspx-macos-intel.tar.gz dnspx
          cd ../..
        fi
        
        # macOS Apple Silicon
        if [ -d "artifacts/dnspx-aarch64-apple-darwin" ]; then
          cd artifacts/dnspx-aarch64-apple-darwin
          tar czf ../../releases/dnspx-macos-arm64.tar.gz dnspx
          cd ../..
        fi
        
        ls -la releases/

    - name: Upload release archives as artifacts
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v4
      with:
        name: release-archives
        path: releases/*

  # ===== NOTIFICATIONS =====
  notify:
    name: Notifications
    if: always()
    needs: [test, security, dependencies, release]
    runs-on: ubuntu-latest
    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.security.result == 'success'
      run: |
        echo "‚úÖ All tests passed on all platforms!"
        echo "üîí Security audit passed"

    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.security.result == 'failure'
      run: |
        echo "‚ùå CI Pipeline failed!"
        echo "Test result: ${{ needs.test.result }}"
        echo "Security result: ${{ needs.security.result }}"
        exit 1

# ===== ADDITIONAL WORKFLOW FILES =====