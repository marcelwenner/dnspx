# .github/workflows/ci.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_run:
    workflows: ["Fast CI (Feature Branches)"]
    types: [completed]

permissions:
  contents: read
  security-events: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0      # Disable for CI
  CARGO_NET_RETRY: 10
  RUST_LOG: warn
  # Optimierte Build-Settings
  CARGO_BUILD_JOBS: 2       # Erh√∂ht von 1 f√ºr bessere Parallelit√§t
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse

jobs:
  # ===== SCHNELLE CHECKS (parallel) =====
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    outputs:
      rust-version: ${{ steps.rust-info.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    # Swatinem/rust-cache ist optimierter als manuelle Cache-Konfiguration
    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        # Shared cache zwischen Jobs
        shared-key: "quick-checks"
        # Cache auch f√ºr unterschiedliche Targets
        cache-targets: true
        cache-on-failure: true

    # sccache f√ºr zus√§tzliche Compiler-Geschwindigkeit
    - name: Setup sccache
      uses: mozilla-actions/sccache-action@v0.0.9

    # sccache env vars NACH der Installation setzen  
    - name: Configure sccache
      run: |
        echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
        echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
        echo "SCCACHE_CACHE_SIZE=2G" >> $GITHUB_ENV

    # sccache env vars NACH der Installation setzen
    - name: Configure sccache
      run: |
        echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
        echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
        echo "SCCACHE_CACHE_SIZE=2G" >> $GITHUB_ENV

    - name: Get Rust version
      id: rust-info
      run: echo "version=$(rustc --version | cut -d' ' -f2)" >> $GITHUB_OUTPUT

    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Run Clippy (nur warnings, schneller)
      run: cargo clippy --workspace --all-targets --all-features -- -D warnings

    # Zus√§tzlicher schneller Check f√ºr Cargo.toml
    - name: Check Cargo.toml
      run: cargo check --workspace --all-targets

  # ===== CROSS-PLATFORM BUILD & TEST (Matrix optimiert) =====
  test:
    name: Test (${{ matrix.os }})
    needs: quick-checks
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Optimierte Matrix: Erst Linux (schnellste), dann andere
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest  
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    # Optimiertes Rust-Caching mit spezifischen Keys
    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}
        shared-key: "test-${{ matrix.os }}"
        cache-targets: true
        cache-on-failure: true

    # sccache f√ºr alle Platforms
    - name: Setup sccache  
      uses: mozilla-actions/sccache-action@v0.0.9

    # sccache env vars NACH der Installation setzen
    - name: Configure sccache
      run: |
        echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
        echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
        echo "SCCACHE_CACHE_SIZE=2G" >> $GITHUB_ENV

    # Parallele Build-Strategien je nach OS
    - name: Build and test
      run: |
        # Schneller check erst, dann build
        cargo check --target ${{ matrix.target }} --all-features
        cargo build --target ${{ matrix.target }} --all-features
        cargo test --target ${{ matrix.target }} --all-features
      env:
        # OS-spezifische Optimierungen
        CARGO_BUILD_JOBS: ${{ matrix.os == 'ubuntu-latest' && '4' || '2' }}

    - name: Show sccache stats
      run: sccache --show-stats

  # ===== SECURITY & QUALITY (parallel zu Tests) =====
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    # Kleinerer Cache nur f√ºr audit tools
    - name: Cache audit tools
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin/cargo-audit
        key: audit-tools-${{ runner.os }}-v2

    - name: Install cargo-audit
      run: cargo install --locked cargo-audit

    - name: Run security audit
      run: cargo audit --ignore RUSTSEC-2023-0071 --ignore RUSTSEC-2024-0436

  # ===== DEPENDENCY CHECK (optimiert f√ºr main branch) =====
  dependencies:
    name: Dependency Check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependency tools
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin/cargo-machete
        key: dep-tools-${{ runner.os }}-v2

    - name: Install cargo-machete
      run: cargo install --locked cargo-machete

    - name: Check for unused dependencies
      run: cargo machete

  # ===== OPTIMIERTE RELEASE BUILDS =====
  release:
    name: Release (${{ matrix.target }})
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    needs: [test, security]
    strategy:
      fail-fast: false
      matrix:
        include:
          # Optimierte Build-Matrix mit nativen Builds wo m√∂glich
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            cross: false
            archive: tar.gz
          - target: aarch64-unknown-linux-gnu  
            os: ubuntu-latest
            cross: true
            archive: tar.gz
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            cross: false
            archive: zip
          - target: aarch64-pc-windows-msvc
            os: windows-latest  
            cross: false
            archive: zip
          - target: x86_64-apple-darwin
            os: macos-latest
            cross: false
            archive: tar.gz
          - target: aarch64-apple-darwin
            os: macos-latest
            cross: false
            archive: tar.gz

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    # Separater Cache f√ºr Release-Builds
    - name: Setup Rust cache for release
      uses: Swatinem/rust-cache@v2
      with:
        key: release-${{ matrix.target }}
        cache-targets: true
        save-if: ${{ github.ref == 'refs/heads/main' }}

    - name: Setup sccache
      uses: mozilla-actions/sccache-action@v0.0.9

    - name: Install cross-compilation tools
      if: matrix.cross
      run: cargo install cross --git https://github.com/cross-rs/cross

    # Optimierter Release-Build
    - name: Build release binary
      run: |
        if [[ "${{ matrix.cross }}" == "true" ]]; then
          cross build --release --target ${{ matrix.target }}
        else
          cargo build --release --target ${{ matrix.target }}
        fi
      env:
        # Release-optimierte Settings
        CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
        CARGO_PROFILE_RELEASE_LTO: fat

    # Intelligentere Artifact-Behandlung
    - name: Prepare release artifact
      shell: bash
      run: |
        mkdir -p releases
        cd target/${{ matrix.target }}/release/
        
        if [[ "${{ matrix.archive }}" == "zip" ]]; then
          7z a ../../../releases/dnspx-${{ matrix.target }}.${{ matrix.archive }} dnspx.exe
        else
          tar czf ../../../releases/dnspx-${{ matrix.target }}.${{ matrix.archive }} dnspx
        fi

    - name: Upload release artifact
      uses: actions/upload-artifact@v4
      with:
        name: dnspx-${{ matrix.target }}
        path: releases/dnspx-${{ matrix.target }}.${{ matrix.archive }}
        retention-days: 7

  # ===== RELEASE ASSEMBLY (nur bei Tags) =====
  assemble-release:
    name: Assemble Release
    if: startsWith(github.ref, 'refs/tags/')
    needs: release
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/*/dnspx-*
        draft: false
        prerelease: ${{ contains(github.ref, 'rc') || contains(github.ref, 'beta') }}

  # ===== STREAMLINED NOTIFICATIONS =====
  notify:
    name: Notifications  
    if: always()
    needs: [quick-checks, test, security]
    runs-on: ubuntu-latest
    steps:
    - name: Report results
      run: |
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.security.result }}" == "success" ]]; then
          echo "‚úÖ CI Pipeline successful!"
          echo "üöÄ Quick checks: ${{ needs.quick-checks.result }}"
          echo "üß™ Tests: ${{ needs.test.result }}" 
          echo "üîí Security: ${{ needs.security.result }}"
        else
          echo "‚ùå CI Pipeline failed!"
          echo "Quick checks: ${{ needs.quick-checks.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Security: ${{ needs.security.result }}"
          exit 1
        fi
